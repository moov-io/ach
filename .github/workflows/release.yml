# Use https://app.stepsecurity.io/ to improve workflow security
name: Create Release

on:
  push:
    tags: [ "v*.*.*" ]

permissions:
  contents: write

jobs:
  testing:
    name: Testing
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v5
      with:
        go-version: stable
      id: go

    - name: Check out code
      uses: actions/checkout@v4

    - name: Check
      run: make check

  create_release:
    name: Create Release
    needs: [testing]
    runs-on: ubuntu-latest
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        prerelease: true

    - name: Output Release URL File
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt

    - name: Save Release URL File for publish
      uses: actions/upload-artifact@v4
      with:
        name: release_url
        path: release_url.txt
        retention-days: 1

  publish:
    name: Publish
    needs: [testing, create_release]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v5
      with:
        go-version: stable
      id: go

    - name: Check out code
      uses: actions/checkout@v4

    - name: Load Release URL File from release job
      uses: actions/download-artifact@v4
      with:
        name: release_url
        path: release_url

    - name: Distribute
      run: make dist

    - name: Get Release File Name & Upload URL
      id: get_release_info
      shell: bash
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}

    - name: Upload Linux Server Binary
      if: runner.os == 'Linux'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./bin/ach-linux-amd64
        asset_name: ach-linux-amd64
        asset_content_type: application/octet-stream

    - name: Upload Linux achcli Binary
      if: runner.os == 'Linux'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./bin/achcli-linux-amd64
        asset_name: achcli-linux-amd64
        asset_content_type: application/octet-stream

    - name: Upload macOS Server Binary
      if: runner.os == 'macOS'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./bin/ach-darwin-amd64
        asset_name: ach-darwin-amd64
        asset_content_type: application/octet-stream

    - name: Upload macOS achcli Binary
      if: runner.os == 'macOS'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./bin/achcli-darwin-amd64
        asset_name: achcli-darwin-amd64
        asset_content_type: application/octet-stream

    - name: Upload Windows Server Binary
      if: runner.os == 'Windows'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./bin/ach.exe
        asset_name: ach.exe
        asset_content_type: application/octet-stream

    - name: Upload Windows achcli Binary
      if: runner.os == 'Windows'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./bin/achcli.exe
        asset_name: achcli.exe
        asset_content_type: application/octet-stream

  webui:
    name: WebUI
    needs: [testing, create_release]
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v5
      with:
        go-version: stable
      id: go

    - name: Check out code
      uses: actions/checkout@v4

    - name: Switch to master
      run: |
        git fetch origin
        git checkout master

    - name: Distribute
      run: make dist-webui

  docker-amd64:
    name: Docker AMD64
    needs: [testing, create_release]
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v5
      with:
        go-version: stable
      id: go
    - name: Check out code
      uses: actions/checkout@v4
    - name: Extract VERSION from Makefile
      id: get_version
      run: |
        VERSION=$(make --no-print-directory get-version)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    - name: Login to DockerHub
      run: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    - name: Build and push amd64 image
      run: |
        docker build --platform linux/amd64 -t moov/ach:${{ steps.get_version.outputs.version }}-amd64 -t moov/ach:latest-amd64 -f Dockerfile .
        docker push moov/ach:${{ steps.get_version.outputs.version }}-amd64
        docker push moov/ach:latest-amd64

  docker-arm64:
    name: Docker ARM64
    needs: [testing, create_release]
    runs-on: ubuntu-24.04-arm
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v5
      with:
        go-version: stable
      id: go
    - name: Check out code
      uses: actions/checkout@v4
    - name: Extract VERSION from Makefile
      id: get_version
      run: |
        VERSION=$(make --no-print-directory get-version)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    - name: Login to DockerHub
      run: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    - name: Build and push arm64 image
      run: |
        docker build --platform linux/arm64 -t moov/ach:${{ steps.get_version.outputs.version }}-arm64 -t moov/ach:latest-arm64 -f Dockerfile .
        docker push moov/ach:${{ steps.get_version.outputs.version }}-arm64
        docker push moov/ach:latest-arm64

  docker-manifest:
    name: Docker Manifest
    needs: [docker-amd64, docker-arm64]
    runs-on: ubuntu-latest
    steps:
      - name: Extract VERSION from Makefile
        id: get_version
        run: |
          VERSION=$(make --no-print-directory get-version)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Login to DockerHub
        run: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      - name: Create and push manifests
        run: |
          docker manifest create moov/ach:${{ steps.get_version.outputs.version }} \
            moov/ach:${{ steps.get_version.outputs.version }}-amd64 \
            moov/ach:${{ steps.get_version.outputs.version }}-arm64
          docker manifest push moov/ach:${{ steps.get_version.outputs.version }}
          docker manifest create moov/ach:latest \
            moov/ach:latest-amd64 \
            moov/ach:latest-arm64
          docker manifest push moov/ach:latest
